{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GiftGridItem.js","components/GiftGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","c","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","gifts","json","data","images","map","id","title","downsized_medium","GiftGridItem","className","src","alt","GiftGrid","loading","state","setState","useEffect","then","useFetchGifs","image","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"+MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAe9C,OACI,0BAAMC,SATY,SAAEC,GACpBA,EAAEC,iBACCJ,EAAWK,OAAOC,QAAU,IAC3BR,GAAe,SAAES,GAAF,OAASP,GAAT,mBAAuBO,OACtCN,EAAc,OAMd,2BACIO,KAAK,OACLC,YAAY,gBACZC,MAAQV,EACRW,SAlBQ,SAAER,GAClBF,EAAeE,EAAES,OAAOF,Y,uBCPnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,+DAECI,MAAMF,GAFP,cAEbG,EAFa,gBAGEA,EAAMC,OAHR,uBAGZC,EAHY,EAGZA,KACDC,EAASD,EAAKE,KAAI,gBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,MAAOH,EAAb,EAAaA,OAAb,MAAwB,CAC5CE,KACAC,QACAT,IAAG,OAAEM,QAAF,IAAEA,OAAF,EAAEA,EAAQI,iBAAiBV,QAPf,kBASZM,GATY,4CAAH,sDCEPK,EAAe,SAAC,GAAkB,IAAjBF,EAAgB,EAAhBA,MAAOT,EAAS,EAATA,IACjC,OACI,yBAAKY,UAAU,4CACX,yBAAKC,IAAMb,EAAMc,IAAML,IACvB,2BAAKA,KCFJM,EAAW,SAAC,GAAkB,IAAhBjB,EAAe,EAAfA,SAAe,ECAd,SAAEA,GAAe,IAAD,EACdf,mBAAS,CAC/BsB,KAAM,GACNW,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAmBxC,OAbAC,qBAAU,WACNtB,EAASC,GACJsB,MACG,SAACd,GACGY,EAAS,CACLb,KAAMC,EACNU,SAAS,SAI1B,CAAClB,IAGGmB,EDjB0BI,CAAcvB,GAAlCQ,EAFyB,EAE9BD,KAAaW,EAFiB,EAEjBA,QAErB,OACI,oCACI,4BACKlB,GAEL,uBAAGc,UAAU,oCAAqCI,GAAW,eAC7D,yBAAKJ,UAAU,aAEPN,EAAOC,KAAI,SAAAe,GAAK,OACZ,kBAAC,EAAD,eACIC,IAAG,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAOd,IACRc,UEajBE,EA3BM,WAAK,IAAD,EACezC,mBAAS,CAAC,cADzB,mBACd0C,EADc,KACF3C,EADE,KAQrB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BACA,4BAEQ2C,EAAWlB,KAAK,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CACIA,SAAUA,EACVyB,IAAKzB,U,MCjBjC4B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.673006b1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( {setCategories} ) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const changeInput = ( e ) => {\n        setInputValue( e.target.value );\n    }\n\n    const handlerSubmit = ( e ) => {\n        e.preventDefault();\n        if(inputValue.trim().length >= 2){\n            setCategories( ( c )=> [inputValue,...c]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={ handlerSubmit }>\n            <input \n                type=\"text\"\n                placeholder=\"Ingrese anime\"\n                value={ inputValue }\n                onChange={ changeInput }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories : PropTypes.func.isRequired,\n}","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=HGYOaSUewGQaiMpICHzRCcgvNRszgDCQ`;\n    const gifts = await fetch(url);\n    const {data} = await gifts.json();\n    const images = data.map(({id, title, images})=>({\n        id,\n        title,\n        url: images?.downsized_medium.url,\n    }));\n    return images;\n}","import React from 'react'\n\nexport const GiftGridItem = ({title, url}) => {\n    return (\n        <div className=\"card animate__animated animate__fadeInUp\">\n            <img src={ url } alt={ title } />\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GiftGridItem } from './GiftGridItem';\n\nexport const GiftGrid = ({ category }) => {\n\n    const { data:images, loading } = useFetchGifs( category );\n\n    return (\n        <>\n            <h3>\n                {category}\n            </h3>\n            <p className=\"animate__animated animate__flash\">{ loading && 'Cargando...' }</p>\n            <div className=\"card-grid\">\n                {\n                    images.map(image=>(\n                        <GiftGridItem \n                            key={image?.id}\n                            {...image}\n                        />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from '../helpers/getGifs';\n\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true,\n    });\n\n    useEffect(()=>{\n        getGifs( category )\n            .then(\n                (images) => {\n                    setState({\n                        data: images,\n                        loading: false,\n                    });\n                }\n            )\n    }, [category])\n\n\n    return state;\n\n}\n","import React, {useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GiftGrid } from './components/GiftGrid';\n\n\nconst GifExpertApp = ()=>{\n    const [categories, setCategories] = useState(['One Piece']);\n\n    // const handlerAdd = () => {\n    //     const newCat = [...categories, 'One Piece'];\n    //     setCategories(newCat);\n    // }\n    \n    return(\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories } />\n            <hr />\n            <ol>\n                {\n                    categories.map( category => (\n                        <GiftGrid\n                            category={category}\n                            key={category}\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    );\n};\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\nimport 'animate.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}